/*
 * 5Minds Engine API
 * This is the swagger ui documentation of the 5Minds Engine API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.miragon.processcube.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.miragon.processcube.client.model.EndEventViewModel;
import io.miragon.processcube.client.model.FlowNodeViewModel;
import io.miragon.processcube.client.model.StartEventViewModel;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

/**
 * A ProcessModel.
 */
@ApiModel(description = "A ProcessModel.")
@JsonPropertyOrder({
  ProcessModel.JSON_PROPERTY_PROCESS_DEFINITION_ID,
  ProcessModel.JSON_PROPERTY_PROCESS_MODEL_ID,
  ProcessModel.JSON_PROPERTY_PROCESS_MODEL_NAME,
  ProcessModel.JSON_PROPERTY_VERSION,
  ProcessModel.JSON_PROPERTY_IS_EXECUTABLE,
  ProcessModel.JSON_PROPERTY_START_EVENTS,
  ProcessModel.JSON_PROPERTY_END_EVENTS,
  ProcessModel.JSON_PROPERTY_FLOW_NODES
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-07-19T14:39:29.278702+02:00[Europe/Berlin]")
public class ProcessModel {
  public static final String JSON_PROPERTY_PROCESS_DEFINITION_ID = "processDefinitionId";
  private String processDefinitionId;

  public static final String JSON_PROPERTY_PROCESS_MODEL_ID = "processModelId";
  private String processModelId;

  public static final String JSON_PROPERTY_PROCESS_MODEL_NAME = "processModelName";
  private String processModelName;

  public static final String JSON_PROPERTY_VERSION = "version";
  private String version;

  public static final String JSON_PROPERTY_IS_EXECUTABLE = "isExecutable";
  private Boolean isExecutable;

  public static final String JSON_PROPERTY_START_EVENTS = "startEvents";
  private List<StartEventViewModel> startEvents = new ArrayList<StartEventViewModel>();

  public static final String JSON_PROPERTY_END_EVENTS = "endEvents";
  private List<EndEventViewModel> endEvents = new ArrayList<EndEventViewModel>();

  public static final String JSON_PROPERTY_FLOW_NODES = "flowNodes";
  private List<FlowNodeViewModel> flowNodes = new ArrayList<FlowNodeViewModel>();


  public ProcessModel processDefinitionId(String processDefinitionId) {
    
    this.processDefinitionId = processDefinitionId;
    return this;
  }

   /**
   * The ID of the ProcessDefinition that contains the ProcessModel.
   * @return processDefinitionId
  **/
  @ApiModelProperty(required = true, value = "The ID of the ProcessDefinition that contains the ProcessModel.")
  @JsonProperty(JSON_PROPERTY_PROCESS_DEFINITION_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getProcessDefinitionId() {
    return processDefinitionId;
  }


  public void setProcessDefinitionId(String processDefinitionId) {
    this.processDefinitionId = processDefinitionId;
  }


  public ProcessModel processModelId(String processModelId) {
    
    this.processModelId = processModelId;
    return this;
  }

   /**
   * The ID of the ProcessModel.
   * @return processModelId
  **/
  @ApiModelProperty(required = true, value = "The ID of the ProcessModel.")
  @JsonProperty(JSON_PROPERTY_PROCESS_MODEL_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getProcessModelId() {
    return processModelId;
  }


  public void setProcessModelId(String processModelId) {
    this.processModelId = processModelId;
  }


  public ProcessModel processModelName(String processModelName) {
    
    this.processModelName = processModelName;
    return this;
  }

   /**
   * The name of the ProcessModel.
   * @return processModelName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The name of the ProcessModel.")
  @JsonProperty(JSON_PROPERTY_PROCESS_MODEL_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getProcessModelName() {
    return processModelName;
  }


  public void setProcessModelName(String processModelName) {
    this.processModelName = processModelName;
  }


  public ProcessModel version(String version) {
    
    this.version = version;
    return this;
  }

   /**
   * The version of the ProcessModel.
   * @return version
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The version of the ProcessModel.")
  @JsonProperty(JSON_PROPERTY_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getVersion() {
    return version;
  }


  public void setVersion(String version) {
    this.version = version;
  }


  public ProcessModel isExecutable(Boolean isExecutable) {
    
    this.isExecutable = isExecutable;
    return this;
  }

   /**
   * A flag indicating whether the ProcessModel can be started.
   * @return isExecutable
  **/
  @ApiModelProperty(required = true, value = "A flag indicating whether the ProcessModel can be started.")
  @JsonProperty(JSON_PROPERTY_IS_EXECUTABLE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getIsExecutable() {
    return isExecutable;
  }


  public void setIsExecutable(Boolean isExecutable) {
    this.isExecutable = isExecutable;
  }


  public ProcessModel startEvents(List<StartEventViewModel> startEvents) {
    
    this.startEvents = startEvents;
    return this;
  }

  public ProcessModel addStartEventsItem(StartEventViewModel startEventsItem) {
    this.startEvents.add(startEventsItem);
    return this;
  }

   /**
   * The StartEvents contained in the ProcessModel.
   * @return startEvents
  **/
  @ApiModelProperty(required = true, value = "The StartEvents contained in the ProcessModel.")
  @JsonProperty(JSON_PROPERTY_START_EVENTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<StartEventViewModel> getStartEvents() {
    return startEvents;
  }


  public void setStartEvents(List<StartEventViewModel> startEvents) {
    this.startEvents = startEvents;
  }


  public ProcessModel endEvents(List<EndEventViewModel> endEvents) {
    
    this.endEvents = endEvents;
    return this;
  }

  public ProcessModel addEndEventsItem(EndEventViewModel endEventsItem) {
    this.endEvents.add(endEventsItem);
    return this;
  }

   /**
   * The EndEvents contained in the ProcessModel.
   * @return endEvents
  **/
  @ApiModelProperty(required = true, value = "The EndEvents contained in the ProcessModel.")
  @JsonProperty(JSON_PROPERTY_END_EVENTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<EndEventViewModel> getEndEvents() {
    return endEvents;
  }


  public void setEndEvents(List<EndEventViewModel> endEvents) {
    this.endEvents = endEvents;
  }


  public ProcessModel flowNodes(List<FlowNodeViewModel> flowNodes) {
    
    this.flowNodes = flowNodes;
    return this;
  }

  public ProcessModel addFlowNodesItem(FlowNodeViewModel flowNodesItem) {
    this.flowNodes.add(flowNodesItem);
    return this;
  }

   /**
   * The FlowNodes contained in the ProcessModel.
   * @return flowNodes
  **/
  @ApiModelProperty(required = true, value = "The FlowNodes contained in the ProcessModel.")
  @JsonProperty(JSON_PROPERTY_FLOW_NODES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<FlowNodeViewModel> getFlowNodes() {
    return flowNodes;
  }


  public void setFlowNodes(List<FlowNodeViewModel> flowNodes) {
    this.flowNodes = flowNodes;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProcessModel processModel = (ProcessModel) o;
    return Objects.equals(this.processDefinitionId, processModel.processDefinitionId) &&
        Objects.equals(this.processModelId, processModel.processModelId) &&
        Objects.equals(this.processModelName, processModel.processModelName) &&
        Objects.equals(this.version, processModel.version) &&
        Objects.equals(this.isExecutable, processModel.isExecutable) &&
        Objects.equals(this.startEvents, processModel.startEvents) &&
        Objects.equals(this.endEvents, processModel.endEvents) &&
        Objects.equals(this.flowNodes, processModel.flowNodes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(processDefinitionId, processModelId, processModelName, version, isExecutable, startEvents, endEvents, flowNodes);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProcessModel {\n");
    sb.append("    processDefinitionId: ").append(toIndentedString(processDefinitionId)).append("\n");
    sb.append("    processModelId: ").append(toIndentedString(processModelId)).append("\n");
    sb.append("    processModelName: ").append(toIndentedString(processModelName)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    isExecutable: ").append(toIndentedString(isExecutable)).append("\n");
    sb.append("    startEvents: ").append(toIndentedString(startEvents)).append("\n");
    sb.append("    endEvents: ").append(toIndentedString(endEvents)).append("\n");
    sb.append("    flowNodes: ").append(toIndentedString(flowNodes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

