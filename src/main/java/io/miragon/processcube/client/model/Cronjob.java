/*
 * 5Minds Engine API
 * This is the swagger ui documentation of the 5Minds Engine API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.miragon.processcube.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.math.BigDecimal;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

/**
 * Describes a cronjob.
 */
@ApiModel(description = "Describes a cronjob.")
@JsonPropertyOrder({
  Cronjob.JSON_PROPERTY_PROCESS_DEFINITION_ID,
  Cronjob.JSON_PROPERTY_PROCESS_MODEL_ID,
  Cronjob.JSON_PROPERTY_START_EVENT_ID,
  Cronjob.JSON_PROPERTY_ENABLED,
  Cronjob.JSON_PROPERTY_CRONTAB,
  Cronjob.JSON_PROPERTY_STARTED_PROCESS_INSTANCES,
  Cronjob.JSON_PROPERTY_LAST_STARTED_PROCESS_INSTANCE,
  Cronjob.JSON_PROPERTY_LAST_TRIGGER_DATE,
  Cronjob.JSON_PROPERTY_NEXT_TRIGGER_DATE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-07-19T14:39:29.278702+02:00[Europe/Berlin]")
public class Cronjob {
  public static final String JSON_PROPERTY_PROCESS_DEFINITION_ID = "processDefinitionId";
  private String processDefinitionId;

  public static final String JSON_PROPERTY_PROCESS_MODEL_ID = "processModelId";
  private String processModelId;

  public static final String JSON_PROPERTY_START_EVENT_ID = "startEventId";
  private String startEventId;

  public static final String JSON_PROPERTY_ENABLED = "enabled";
  private Boolean enabled;

  public static final String JSON_PROPERTY_CRONTAB = "crontab";
  private String crontab;

  public static final String JSON_PROPERTY_STARTED_PROCESS_INSTANCES = "startedProcessInstances";
  private BigDecimal startedProcessInstances;

  public static final String JSON_PROPERTY_LAST_STARTED_PROCESS_INSTANCE = "lastStartedProcessInstance";
  private String lastStartedProcessInstance;

  public static final String JSON_PROPERTY_LAST_TRIGGER_DATE = "lastTriggerDate";
  private String lastTriggerDate;

  public static final String JSON_PROPERTY_NEXT_TRIGGER_DATE = "nextTriggerDate";
  private String nextTriggerDate;


  public Cronjob processDefinitionId(String processDefinitionId) {
    
    this.processDefinitionId = processDefinitionId;
    return this;
  }

   /**
   * The ID of the ProcessDefinition that contains the cronjob.
   * @return processDefinitionId
  **/
  @ApiModelProperty(required = true, value = "The ID of the ProcessDefinition that contains the cronjob.")
  @JsonProperty(JSON_PROPERTY_PROCESS_DEFINITION_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getProcessDefinitionId() {
    return processDefinitionId;
  }


  public void setProcessDefinitionId(String processDefinitionId) {
    this.processDefinitionId = processDefinitionId;
  }


  public Cronjob processModelId(String processModelId) {
    
    this.processModelId = processModelId;
    return this;
  }

   /**
   * The ID of the ProcessModel that contains the cronjob.
   * @return processModelId
  **/
  @ApiModelProperty(required = true, value = "The ID of the ProcessModel that contains the cronjob.")
  @JsonProperty(JSON_PROPERTY_PROCESS_MODEL_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getProcessModelId() {
    return processModelId;
  }


  public void setProcessModelId(String processModelId) {
    this.processModelId = processModelId;
  }


  public Cronjob startEventId(String startEventId) {
    
    this.startEventId = startEventId;
    return this;
  }

   /**
   * The ID of the StartEvent that contains the cronjob.
   * @return startEventId
  **/
  @ApiModelProperty(required = true, value = "The ID of the StartEvent that contains the cronjob.")
  @JsonProperty(JSON_PROPERTY_START_EVENT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getStartEventId() {
    return startEventId;
  }


  public void setStartEventId(String startEventId) {
    this.startEventId = startEventId;
  }


  public Cronjob enabled(Boolean enabled) {
    
    this.enabled = enabled;
    return this;
  }

   /**
   * Flag indicating whether or not the cronjob is enabled.
   * @return enabled
  **/
  @ApiModelProperty(required = true, value = "Flag indicating whether or not the cronjob is enabled.")
  @JsonProperty(JSON_PROPERTY_ENABLED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getEnabled() {
    return enabled;
  }


  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public Cronjob crontab(String crontab) {
    
    this.crontab = crontab;
    return this;
  }

   /**
   * The crontab that describs the cronjob.
   * @return crontab
  **/
  @ApiModelProperty(required = true, value = "The crontab that describs the cronjob.")
  @JsonProperty(JSON_PROPERTY_CRONTAB)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getCrontab() {
    return crontab;
  }


  public void setCrontab(String crontab) {
    this.crontab = crontab;
  }


  public Cronjob startedProcessInstances(BigDecimal startedProcessInstances) {
    
    this.startedProcessInstances = startedProcessInstances;
    return this;
  }

   /**
   * The number of ProcessInstances that have been started by this cronjob.
   * @return startedProcessInstances
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The number of ProcessInstances that have been started by this cronjob.")
  @JsonProperty(JSON_PROPERTY_STARTED_PROCESS_INSTANCES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getStartedProcessInstances() {
    return startedProcessInstances;
  }


  public void setStartedProcessInstances(BigDecimal startedProcessInstances) {
    this.startedProcessInstances = startedProcessInstances;
  }


  public Cronjob lastStartedProcessInstance(String lastStartedProcessInstance) {
    
    this.lastStartedProcessInstance = lastStartedProcessInstance;
    return this;
  }

   /**
   * The ID of the last ProcessInstance that has been started by this cronjob.
   * @return lastStartedProcessInstance
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The ID of the last ProcessInstance that has been started by this cronjob.")
  @JsonProperty(JSON_PROPERTY_LAST_STARTED_PROCESS_INSTANCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getLastStartedProcessInstance() {
    return lastStartedProcessInstance;
  }


  public void setLastStartedProcessInstance(String lastStartedProcessInstance) {
    this.lastStartedProcessInstance = lastStartedProcessInstance;
  }


  public Cronjob lastTriggerDate(String lastTriggerDate) {
    
    this.lastTriggerDate = lastTriggerDate;
    return this;
  }

   /**
   * The date of the last time the cronjob was triggered.
   * @return lastTriggerDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The date of the last time the cronjob was triggered.")
  @JsonProperty(JSON_PROPERTY_LAST_TRIGGER_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getLastTriggerDate() {
    return lastTriggerDate;
  }


  public void setLastTriggerDate(String lastTriggerDate) {
    this.lastTriggerDate = lastTriggerDate;
  }


  public Cronjob nextTriggerDate(String nextTriggerDate) {
    
    this.nextTriggerDate = nextTriggerDate;
    return this;
  }

   /**
   * The date of the next time the cronjob will be triggered.
   * @return nextTriggerDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The date of the next time the cronjob will be triggered.")
  @JsonProperty(JSON_PROPERTY_NEXT_TRIGGER_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getNextTriggerDate() {
    return nextTriggerDate;
  }


  public void setNextTriggerDate(String nextTriggerDate) {
    this.nextTriggerDate = nextTriggerDate;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Cronjob cronjob = (Cronjob) o;
    return Objects.equals(this.processDefinitionId, cronjob.processDefinitionId) &&
        Objects.equals(this.processModelId, cronjob.processModelId) &&
        Objects.equals(this.startEventId, cronjob.startEventId) &&
        Objects.equals(this.enabled, cronjob.enabled) &&
        Objects.equals(this.crontab, cronjob.crontab) &&
        Objects.equals(this.startedProcessInstances, cronjob.startedProcessInstances) &&
        Objects.equals(this.lastStartedProcessInstance, cronjob.lastStartedProcessInstance) &&
        Objects.equals(this.lastTriggerDate, cronjob.lastTriggerDate) &&
        Objects.equals(this.nextTriggerDate, cronjob.nextTriggerDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(processDefinitionId, processModelId, startEventId, enabled, crontab, startedProcessInstances, lastStartedProcessInstance, lastTriggerDate, nextTriggerDate);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Cronjob {\n");
    sb.append("    processDefinitionId: ").append(toIndentedString(processDefinitionId)).append("\n");
    sb.append("    processModelId: ").append(toIndentedString(processModelId)).append("\n");
    sb.append("    startEventId: ").append(toIndentedString(startEventId)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    crontab: ").append(toIndentedString(crontab)).append("\n");
    sb.append("    startedProcessInstances: ").append(toIndentedString(startedProcessInstances)).append("\n");
    sb.append("    lastStartedProcessInstance: ").append(toIndentedString(lastStartedProcessInstance)).append("\n");
    sb.append("    lastTriggerDate: ").append(toIndentedString(lastTriggerDate)).append("\n");
    sb.append("    nextTriggerDate: ").append(toIndentedString(nextTriggerDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

