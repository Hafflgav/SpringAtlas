/*
 * 5Minds Engine API
 * This is the swagger ui documentation of the 5Minds Engine API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.miragon.processcube.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

/**
 * Describes an active cronjob.
 */
@ApiModel(description = "Describes an active cronjob.")
@JsonPropertyOrder({
  ActiveCronjob.JSON_PROPERTY_PROCESS_DEFINITION_ID,
  ActiveCronjob.JSON_PROPERTY_PROCESS_MODEL_ID,
  ActiveCronjob.JSON_PROPERTY_START_EVENT_ID,
  ActiveCronjob.JSON_PROPERTY_CRONTAB,
  ActiveCronjob.JSON_PROPERTY_NEXT_EXECUTION
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-07-19T14:39:29.278702+02:00[Europe/Berlin]")
public class ActiveCronjob {
  public static final String JSON_PROPERTY_PROCESS_DEFINITION_ID = "processDefinitionId";
  private String processDefinitionId;

  public static final String JSON_PROPERTY_PROCESS_MODEL_ID = "processModelId";
  private String processModelId;

  public static final String JSON_PROPERTY_START_EVENT_ID = "startEventId";
  private String startEventId;

  public static final String JSON_PROPERTY_CRONTAB = "crontab";
  private String crontab;

  public static final String JSON_PROPERTY_NEXT_EXECUTION = "nextExecution";
  private String nextExecution;


  public ActiveCronjob processDefinitionId(String processDefinitionId) {
    
    this.processDefinitionId = processDefinitionId;
    return this;
  }

   /**
   * The processDefinitionId that contains the ProcessModel with the cronjob.
   * @return processDefinitionId
  **/
  @ApiModelProperty(required = true, value = "The processDefinitionId that contains the ProcessModel with the cronjob.")
  @JsonProperty(JSON_PROPERTY_PROCESS_DEFINITION_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getProcessDefinitionId() {
    return processDefinitionId;
  }


  public void setProcessDefinitionId(String processDefinitionId) {
    this.processDefinitionId = processDefinitionId;
  }


  public ActiveCronjob processModelId(String processModelId) {
    
    this.processModelId = processModelId;
    return this;
  }

   /**
   * The ID of the ProcessModel that contains the cronjob.
   * @return processModelId
  **/
  @ApiModelProperty(required = true, value = "The ID of the ProcessModel that contains the cronjob.")
  @JsonProperty(JSON_PROPERTY_PROCESS_MODEL_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getProcessModelId() {
    return processModelId;
  }


  public void setProcessModelId(String processModelId) {
    this.processModelId = processModelId;
  }


  public ActiveCronjob startEventId(String startEventId) {
    
    this.startEventId = startEventId;
    return this;
  }

   /**
   * The ID of the StartEvent that contains the cronjob.
   * @return startEventId
  **/
  @ApiModelProperty(required = true, value = "The ID of the StartEvent that contains the cronjob.")
  @JsonProperty(JSON_PROPERTY_START_EVENT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getStartEventId() {
    return startEventId;
  }


  public void setStartEventId(String startEventId) {
    this.startEventId = startEventId;
  }


  public ActiveCronjob crontab(String crontab) {
    
    this.crontab = crontab;
    return this;
  }

   /**
   * The crontab that describs the cronjob.
   * @return crontab
  **/
  @ApiModelProperty(required = true, value = "The crontab that describs the cronjob.")
  @JsonProperty(JSON_PROPERTY_CRONTAB)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getCrontab() {
    return crontab;
  }


  public void setCrontab(String crontab) {
    this.crontab = crontab;
  }


  public ActiveCronjob nextExecution(String nextExecution) {
    
    this.nextExecution = nextExecution;
    return this;
  }

   /**
   * The next time the cronjob will be triggered.
   * @return nextExecution
  **/
  @ApiModelProperty(required = true, value = "The next time the cronjob will be triggered.")
  @JsonProperty(JSON_PROPERTY_NEXT_EXECUTION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getNextExecution() {
    return nextExecution;
  }


  public void setNextExecution(String nextExecution) {
    this.nextExecution = nextExecution;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ActiveCronjob activeCronjob = (ActiveCronjob) o;
    return Objects.equals(this.processDefinitionId, activeCronjob.processDefinitionId) &&
        Objects.equals(this.processModelId, activeCronjob.processModelId) &&
        Objects.equals(this.startEventId, activeCronjob.startEventId) &&
        Objects.equals(this.crontab, activeCronjob.crontab) &&
        Objects.equals(this.nextExecution, activeCronjob.nextExecution);
  }

  @Override
  public int hashCode() {
    return Objects.hash(processDefinitionId, processModelId, startEventId, crontab, nextExecution);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ActiveCronjob {\n");
    sb.append("    processDefinitionId: ").append(toIndentedString(processDefinitionId)).append("\n");
    sb.append("    processModelId: ").append(toIndentedString(processModelId)).append("\n");
    sb.append("    startEventId: ").append(toIndentedString(startEventId)).append("\n");
    sb.append("    crontab: ").append(toIndentedString(crontab)).append("\n");
    sb.append("    nextExecution: ").append(toIndentedString(nextExecution)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

