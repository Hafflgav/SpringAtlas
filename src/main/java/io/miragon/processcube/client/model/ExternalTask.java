/*
 * 5Minds Engine API
 * This is the swagger ui documentation of the 5Minds Engine API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.miragon.processcube.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.miragon.processcube.client.model.ExternalTaskState;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

/**
 * Describes an ExternalTask that the Engine has delegated to an ExternalTask worker for processing.
 */
@ApiModel(description = "Describes an ExternalTask that the Engine has delegated to an ExternalTask worker for processing.")
@JsonPropertyOrder({
  ExternalTask.JSON_PROPERTY_ID,
  ExternalTask.JSON_PROPERTY_WORKER_ID,
  ExternalTask.JSON_PROPERTY_TOPIC,
  ExternalTask.JSON_PROPERTY_IS_SINGLE_TRY,
  ExternalTask.JSON_PROPERTY_FLOW_NODE_INSTANCE_ID,
  ExternalTask.JSON_PROPERTY_CORRELATION_ID,
  ExternalTask.JSON_PROPERTY_PROCESS_DEFINITION_ID,
  ExternalTask.JSON_PROPERTY_PROCESS_MODEL_ID,
  ExternalTask.JSON_PROPERTY_PROCESS_INSTANCE_ID,
  ExternalTask.JSON_PROPERTY_OWNER_ID,
  ExternalTask.JSON_PROPERTY_PAYLOAD,
  ExternalTask.JSON_PROPERTY_LOCK_EXPIRATION_TIME,
  ExternalTask.JSON_PROPERTY_STATE,
  ExternalTask.JSON_PROPERTY_FINISHED_AT,
  ExternalTask.JSON_PROPERTY_RESULT,
  ExternalTask.JSON_PROPERTY_ERROR,
  ExternalTask.JSON_PROPERTY_CREATED_AT
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-07-19T14:39:29.278702+02:00[Europe/Berlin]")
public class ExternalTask {
  public static final String JSON_PROPERTY_ID = "id";
  private String id;

  public static final String JSON_PROPERTY_WORKER_ID = "workerId";
  private String workerId;

  public static final String JSON_PROPERTY_TOPIC = "topic";
  private String topic;

  public static final String JSON_PROPERTY_IS_SINGLE_TRY = "isSingleTry";
  private Boolean isSingleTry;

  public static final String JSON_PROPERTY_FLOW_NODE_INSTANCE_ID = "flowNodeInstanceId";
  private String flowNodeInstanceId;

  public static final String JSON_PROPERTY_CORRELATION_ID = "correlationId";
  private String correlationId;

  public static final String JSON_PROPERTY_PROCESS_DEFINITION_ID = "processDefinitionId";
  private String processDefinitionId;

  public static final String JSON_PROPERTY_PROCESS_MODEL_ID = "processModelId";
  private String processModelId;

  public static final String JSON_PROPERTY_PROCESS_INSTANCE_ID = "processInstanceId";
  private String processInstanceId;

  public static final String JSON_PROPERTY_OWNER_ID = "ownerId";
  private String ownerId;

  public static final String JSON_PROPERTY_PAYLOAD = "payload";
  private Object payload;

  public static final String JSON_PROPERTY_LOCK_EXPIRATION_TIME = "lockExpirationTime";
  private String lockExpirationTime;

  public static final String JSON_PROPERTY_STATE = "state";
  private ExternalTaskState state;

  public static final String JSON_PROPERTY_FINISHED_AT = "finishedAt";
  private String finishedAt;

  public static final String JSON_PROPERTY_RESULT = "result";
  private Object result;

  public static final String JSON_PROPERTY_ERROR = "error";
  private Object error;

  public static final String JSON_PROPERTY_CREATED_AT = "createdAt";
  private String createdAt;


  public ExternalTask id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * The ID of the ExternalTask.
   * @return id
  **/
  @ApiModelProperty(required = true, value = "The ID of the ExternalTask.")
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public ExternalTask workerId(String workerId) {
    
    this.workerId = workerId;
    return this;
  }

   /**
   * The ID of the worker that has most recently locked the ExternalTask for processing.
   * @return workerId
  **/
  @ApiModelProperty(required = true, value = "The ID of the worker that has most recently locked the ExternalTask for processing.")
  @JsonProperty(JSON_PROPERTY_WORKER_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getWorkerId() {
    return workerId;
  }


  public void setWorkerId(String workerId) {
    this.workerId = workerId;
  }


  public ExternalTask topic(String topic) {
    
    this.topic = topic;
    return this;
  }

   /**
   * The topic of the ExternalTask.
   * @return topic
  **/
  @ApiModelProperty(required = true, value = "The topic of the ExternalTask.")
  @JsonProperty(JSON_PROPERTY_TOPIC)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getTopic() {
    return topic;
  }


  public void setTopic(String topic) {
    this.topic = topic;
  }


  public ExternalTask isSingleTry(Boolean isSingleTry) {
    
    this.isSingleTry = isSingleTry;
    return this;
  }

   /**
   * A flag indicating whether or not the ExternalTask is a single try task.
   * @return isSingleTry
  **/
  @ApiModelProperty(required = true, value = "A flag indicating whether or not the ExternalTask is a single try task.")
  @JsonProperty(JSON_PROPERTY_IS_SINGLE_TRY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getIsSingleTry() {
    return isSingleTry;
  }


  public void setIsSingleTry(Boolean isSingleTry) {
    this.isSingleTry = isSingleTry;
  }


  public ExternalTask flowNodeInstanceId(String flowNodeInstanceId) {
    
    this.flowNodeInstanceId = flowNodeInstanceId;
    return this;
  }

   /**
   * The ID of the FlowNodeInstance that the ExternalTask belongs to.
   * @return flowNodeInstanceId
  **/
  @ApiModelProperty(required = true, value = "The ID of the FlowNodeInstance that the ExternalTask belongs to.")
  @JsonProperty(JSON_PROPERTY_FLOW_NODE_INSTANCE_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getFlowNodeInstanceId() {
    return flowNodeInstanceId;
  }


  public void setFlowNodeInstanceId(String flowNodeInstanceId) {
    this.flowNodeInstanceId = flowNodeInstanceId;
  }


  public ExternalTask correlationId(String correlationId) {
    
    this.correlationId = correlationId;
    return this;
  }

   /**
   * The ID of the Correlation that the ExternalTask belongs to.
   * @return correlationId
  **/
  @ApiModelProperty(required = true, value = "The ID of the Correlation that the ExternalTask belongs to.")
  @JsonProperty(JSON_PROPERTY_CORRELATION_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getCorrelationId() {
    return correlationId;
  }


  public void setCorrelationId(String correlationId) {
    this.correlationId = correlationId;
  }


  public ExternalTask processDefinitionId(String processDefinitionId) {
    
    this.processDefinitionId = processDefinitionId;
    return this;
  }

   /**
   * The ID of the ProcessDefinition that contains the ExternalTask.
   * @return processDefinitionId
  **/
  @ApiModelProperty(required = true, value = "The ID of the ProcessDefinition that contains the ExternalTask.")
  @JsonProperty(JSON_PROPERTY_PROCESS_DEFINITION_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getProcessDefinitionId() {
    return processDefinitionId;
  }


  public void setProcessDefinitionId(String processDefinitionId) {
    this.processDefinitionId = processDefinitionId;
  }


  public ExternalTask processModelId(String processModelId) {
    
    this.processModelId = processModelId;
    return this;
  }

   /**
   * The ID of the ProcessModel that contains the ExternalTask.
   * @return processModelId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The ID of the ProcessModel that contains the ExternalTask.")
  @JsonProperty(JSON_PROPERTY_PROCESS_MODEL_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getProcessModelId() {
    return processModelId;
  }


  public void setProcessModelId(String processModelId) {
    this.processModelId = processModelId;
  }


  public ExternalTask processInstanceId(String processInstanceId) {
    
    this.processInstanceId = processInstanceId;
    return this;
  }

   /**
   * The ID of the ProcessInstance the ExternalTask belongs to.
   * @return processInstanceId
  **/
  @ApiModelProperty(required = true, value = "The ID of the ProcessInstance the ExternalTask belongs to.")
  @JsonProperty(JSON_PROPERTY_PROCESS_INSTANCE_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getProcessInstanceId() {
    return processInstanceId;
  }


  public void setProcessInstanceId(String processInstanceId) {
    this.processInstanceId = processInstanceId;
  }


  public ExternalTask ownerId(String ownerId) {
    
    this.ownerId = ownerId;
    return this;
  }

   /**
   * The ID of the user that owns the ExternalTask.
   * @return ownerId
  **/
  @ApiModelProperty(required = true, value = "The ID of the user that owns the ExternalTask.")
  @JsonProperty(JSON_PROPERTY_OWNER_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getOwnerId() {
    return ownerId;
  }


  public void setOwnerId(String ownerId) {
    this.ownerId = ownerId;
  }


  public ExternalTask payload(Object payload) {
    
    this.payload = payload;
    return this;
  }

   /**
   * The payload containing all relevant data the worker needs to execute the ExternalTask.
   * @return payload
  **/
  @ApiModelProperty(required = true, value = "The payload containing all relevant data the worker needs to execute the ExternalTask.")
  @JsonProperty(JSON_PROPERTY_PAYLOAD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Object getPayload() {
    return payload;
  }


  public void setPayload(Object payload) {
    this.payload = payload;
  }


  public ExternalTask lockExpirationTime(String lockExpirationTime) {
    
    this.lockExpirationTime = lockExpirationTime;
    return this;
  }

   /**
   * The lock expiration time. On expiration, the task is released to be processed by other workers. If not set, the ExternalTask is not locked.
   * @return lockExpirationTime
  **/
  @ApiModelProperty(required = true, value = "The lock expiration time. On expiration, the task is released to be processed by other workers. If not set, the ExternalTask is not locked.")
  @JsonProperty(JSON_PROPERTY_LOCK_EXPIRATION_TIME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getLockExpirationTime() {
    return lockExpirationTime;
  }


  public void setLockExpirationTime(String lockExpirationTime) {
    this.lockExpirationTime = lockExpirationTime;
  }


  public ExternalTask state(ExternalTaskState state) {
    
    this.state = state;
    return this;
  }

   /**
   * Get state
   * @return state
  **/
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_STATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public ExternalTaskState getState() {
    return state;
  }


  public void setState(ExternalTaskState state) {
    this.state = state;
  }


  public ExternalTask finishedAt(String finishedAt) {
    
    this.finishedAt = finishedAt;
    return this;
  }

   /**
   * The date when the ExternalTask was finished.
   * @return finishedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The date when the ExternalTask was finished.")
  @JsonProperty(JSON_PROPERTY_FINISHED_AT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFinishedAt() {
    return finishedAt;
  }


  public void setFinishedAt(String finishedAt) {
    this.finishedAt = finishedAt;
  }


  public ExternalTask result(Object result) {
    
    this.result = result;
    return this;
  }

   /**
   * The result of the ExternalTask.
   * @return result
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The result of the ExternalTask.")
  @JsonProperty(JSON_PROPERTY_RESULT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Object getResult() {
    return result;
  }


  public void setResult(Object result) {
    this.result = result;
  }


  public ExternalTask error(Object error) {
    
    this.error = error;
    return this;
  }

   /**
   * The error that occurred during processing of the ExternalTask (if any).
   * @return error
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The error that occurred during processing of the ExternalTask (if any).")
  @JsonProperty(JSON_PROPERTY_ERROR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Object getError() {
    return error;
  }


  public void setError(Object error) {
    this.error = error;
  }


  public ExternalTask createdAt(String createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * The date when the ExternalTask was created.
   * @return createdAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The date when the ExternalTask was created.")
  @JsonProperty(JSON_PROPERTY_CREATED_AT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExternalTask externalTask = (ExternalTask) o;
    return Objects.equals(this.id, externalTask.id) &&
        Objects.equals(this.workerId, externalTask.workerId) &&
        Objects.equals(this.topic, externalTask.topic) &&
        Objects.equals(this.isSingleTry, externalTask.isSingleTry) &&
        Objects.equals(this.flowNodeInstanceId, externalTask.flowNodeInstanceId) &&
        Objects.equals(this.correlationId, externalTask.correlationId) &&
        Objects.equals(this.processDefinitionId, externalTask.processDefinitionId) &&
        Objects.equals(this.processModelId, externalTask.processModelId) &&
        Objects.equals(this.processInstanceId, externalTask.processInstanceId) &&
        Objects.equals(this.ownerId, externalTask.ownerId) &&
        Objects.equals(this.payload, externalTask.payload) &&
        Objects.equals(this.lockExpirationTime, externalTask.lockExpirationTime) &&
        Objects.equals(this.state, externalTask.state) &&
        Objects.equals(this.finishedAt, externalTask.finishedAt) &&
        Objects.equals(this.result, externalTask.result) &&
        Objects.equals(this.error, externalTask.error) &&
        Objects.equals(this.createdAt, externalTask.createdAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, workerId, topic, isSingleTry, flowNodeInstanceId, correlationId, processDefinitionId, processModelId, processInstanceId, ownerId, payload, lockExpirationTime, state, finishedAt, result, error, createdAt);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExternalTask {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    workerId: ").append(toIndentedString(workerId)).append("\n");
    sb.append("    topic: ").append(toIndentedString(topic)).append("\n");
    sb.append("    isSingleTry: ").append(toIndentedString(isSingleTry)).append("\n");
    sb.append("    flowNodeInstanceId: ").append(toIndentedString(flowNodeInstanceId)).append("\n");
    sb.append("    correlationId: ").append(toIndentedString(correlationId)).append("\n");
    sb.append("    processDefinitionId: ").append(toIndentedString(processDefinitionId)).append("\n");
    sb.append("    processModelId: ").append(toIndentedString(processModelId)).append("\n");
    sb.append("    processInstanceId: ").append(toIndentedString(processInstanceId)).append("\n");
    sb.append("    ownerId: ").append(toIndentedString(ownerId)).append("\n");
    sb.append("    payload: ").append(toIndentedString(payload)).append("\n");
    sb.append("    lockExpirationTime: ").append(toIndentedString(lockExpirationTime)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    finishedAt: ").append(toIndentedString(finishedAt)).append("\n");
    sb.append("    result: ").append(toIndentedString(result)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

